function [n_ensemble, output_ensemble, output_single]=...
    Normal_L_discrimination_ensemble(n_ensemble)
% set up path
addpath(genpath('/auto/k2/share/matlab/fet/Neural Discrimination'))
addpath(genpath('/auto/k2/share/matlab/fet/P Data Base Tools'))

% Runs the neural discrimination for normal L
brainregion = 'maybe_L';
stimtype = 'conspecific';
%n_ensemble = 3;
load normaladult_L_conMLnoise_info

% All the data files pasted from the Excel file
% fieldL_normal = { ...
%         {'publu0717', '3_B' }, ...
%     {'publu0717', '6_B' }, ...
%     {'publu0717', '7_B' }, ...
%     {'publu0717', '9_B' }, ...
%     {'lghp1616', '4_B' }, ...
%     {'lghp1616', '5_B' }, ...
%     {'lghp1616', '6_B' }, ...
%     {'lghp1616', '7_B' }, ...
%     {'lghp1616', '8_B' }, ...
%     {'lghp1616', '9_B' }, ...
%     {'lghp1616', '10_B' }, ...
%     {'pipu1018', '1_B' }, ...   
%     {'yy0304', '3_B' }, ... 
%     {'blahpi0303', '5_B'}, ...
%     {'blahpi0303', '7_B' }, ...
%     {'blahpi0303', '8_B' }, ...
%     {'blahpi0303', '9_B' }, ...
%     {'blahpi0303', '10_B' }, ...
%      {'pipu1018', '2_B' }, ... 
%     {'pipu1018', '3_B' }, ...
%     {'pipu1018', '4_B' }, ...
%     {'pipu1018', '6_B' }, ...
%     {'pipu1018', '7_B' }, ...
%     {'lblb0808', '3_B' }, ...
%     {'gg0304', '4_B' }, ...
%     {'gg0304', '6_B' }, ...
%     {'gg0304', '8_B' }, ...
%     {'gg0304', '9_B' }, ...
%     {'gg0304', '10_B' }, ...
%     {'pipu0617', '3_B' }, ...
%     {'pipu0617', '4_B' }, ...
%     {'pipu0617', '5_B' }, ...
%     {'pipu0617', '7_B' }, ...
%     {'pipu0617', '8_B' }, ...
%     {'pipu0617', '9_B' }, ...
%     {'pipu0617', '10_B' }, ...
%     {'yg0111', '2_B' }, ...
%     {'yg0111', '3_B' }, ...
%     {'yg0111', '4_B' }, ...
%     {'yg0111', '5_B' }, ...
%     {'yg0111', '6_B' }, ...
%     {'yg0111', '7_B' }, ...
%     {'yg0111', '8_B' }, ...
%     {'yg0111', '9_B' }, ...
%     {'yg0111', '10_B' }, ...
%     {'yg0331', '2_B' }, ...
%     {'yg0331', '3_B' }, ...
%     {'yg0331', '4_B' }, ...
%     {'yg0331', '5_B' }, ...
%     {'yg0331', '8_B' }, ...
%     {'yg0331', '9_B' }, ...
%     {'yg0331', '10_B' }, ...
%     {'yg0616', '8_B' }, ...
%     {'yg0616', '9_B' }, ...
%     {'yg0616', '10_B' }, ...
%     {'yg0616', '11_B' }, ...
%     {'yg0616', '12_B' }, ...
%     {'blublu9394', '2_B' }, ...
%     {'blublu9394', '3_B' }, ...
%     {'blublu9394', '4_B' }, ...
%     {'blublu9394', '5_B' }, ...
%     {'blublu9394', '7_B' }, ...
%     {'blahpi0808', '4_B' }, ...
%     {'blahpi0808', '6_B' }, ... 
%     {'blahpi0808', '7_B' } };

fieldL_normal = L_OKunits;

number_cells = length(fieldL_normal);

if (n_ensemble > number_cells)
    fprintf(1,'Number of cells in ensemble %d greater than the number of cells in database %d\n', n_ensemble, number_cells);
    n_ensemble = number_cells;
end

% Generate groups
stim_used = cell(1, number_cells);
group_id = zeros(1, number_cells);


for i=1:number_cells
    birdname = fieldL_normal{i}{1};
    cellname = fieldL_normal{i}{2};
    fprintf(1,'Cell name %s %s\n', birdname, cellname);
    [nfiles, spike_times, stimlen, stimname] = read_all_spikes(birdname, brainregion, cellname, stimtype);
    stim_used{i} = stimname;
    % plot_all_spikes(birdname, brainregion, cellname, stimtype);
%     pause();
%     close all;
end

% make groups based on stim played
ngroups = 1;
group_id(1) = ngroups;
stim_group{ngroups} = stim_used{1};
for i=2:number_cells
    group_found = 0;
    for ig=1:ngroups
        % count the number of fits
        matches = 0;
        ng = length(stim_group{ig});
        nu = length(stim_used{i});
        for ing=1:ng
            for inu=1:nu
               if stim_group{ig}{ing} == stim_used{i}{inu}
                   matches = matches +1;
                   break;
               end
            end
        end
        if (matches >= 20)
            group_found = 1;
            group_id(i) = ig;
            break;
        end
    end
    if group_found == 0
        ngroups = ngroups+1;
        group_id(i) = ngroups;
        stim_group{ngroups} = stim_used{i};
    end     
end

% find good groups (more than 10 neurons)
minneuron = 10;
group_n = zeros(1, ngroups);
group_cells = cell(1, ngroups);
good_groups = 0;
for ig=1:ngroups
    group_cells{ig} = find(group_id==ig);
    group_n(ig) = length(group_cells{ig});
    if group_n(ig) > minneuron
        good_groups = good_groups+1;
    end
end

% Choose a random group
ig_good = randi(good_groups);
ig_count = 0;
for ig=1:ngroups
    if group_n(ig) > minneuron
        ig_count = ig_count + 1;
        if ig_count == ig_good
            break
        end
    end
end
% ig has the correct group
% Obtain a permutation of n_ensemble neurons
%n_choose = 1:n_ensemble; 

n_choose = randperm(group_n(ig));

clear cellid
for i=1:n_ensemble
    cellid(i).birdname = fieldL_normal{group_cells{ig}(n_choose(i))}{1};
    cellid(i).cellname = fieldL_normal{group_cells{ig}(n_choose(i))}{2};
    cellid(i).brainregion = brainregion;
end

output_ensemble = neural_discrimination_ensemble(cellid, stimtype, 1000, []);

if ~isempty(output_ensemble)
    for i=1:n_ensemble
        output_single(i) = neural_discrimination_ensemble(cellid(i), stimtype, output_ensemble.maxrep, output_ensemble.stim_names);
    end
    
    % save fieldL_ensemble_neural_discrimination.mat cellid output_ensemble output_single;
    
    disp('Ensemble percent correct:')
    disp(output_ensemble.percorrectB)
    
    disp('Single percent correct:')
    disp([output_single.percorrectB])
    
    disp('Ensemble MI:')
    disp(output_ensemble.mizdistSB)
    
    disp('Single MI:')
    disp([output_single.mizdistSB])
else
    for i=1:n_ensemble
        output_single(i) = {[]};
    end
end

return
    
